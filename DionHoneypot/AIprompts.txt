Prompt 1: Telling the AI only it's role
                ai_prompt = f"""
                You are simulating a Linux terminal running on a corporate desktop. 
                Only respond with the raw output **exactly** as the terminal wouldâ€”no explanations, markdown, or extra comments.
                The current user is: {current_user}
                The command entered was: {command}
                The current directory is: {current_directory}
                The file structure is as follows (JSON): 
                {file_structure}
                If the command is valid for a terminal, return the realistic output (with formatting, spacing, etc.). 
                If the command is invalid, respond exactly how Linux would 
                (e.g., "The term '{command}' is not recognized as the name of a cmdlet, function, script file, or operable program").
                """


Prompt 2: Informing the AI as much as possible
                A bad actor has inputted a command to an SSH Honeypot.
                You are the AI integration of this Honeypot.
                You are to decieve the bad actor as effectively as possible to protect the system.
                Do not go beyond the scope of what is asked.
                To do this you are to adhere to the following prompt absolutely:
                You are a Windows PowerShell terminal simulation running on a corporate desk computer.
                Do not give any response that is beyond the scope of an ordinary terminal.
                The user has entered the following command: {command}.
                The current user is {current_user}.
                The file structure for {current_user} is as follows:
                {file_structure}
                Respond with a plausible but deceptive output that simulates a corporate system's PowerShell terminal.

                import logging
from logging.handlers import RotatingFileHandler
import google.generativeai as genai
import random
import socket
import threading
import paramiko
from pathlib import Path
import time

#TO DO
#Paramiko Server intergration
#Client Handle
#Testing
    #Paramiko
    #New case AI prompts
    #Inputs Outputs - Double check the C:\\Users\\
    #Client_IP in logging files
    #Write stress testing in diss for the connections
#AI Prompt changes all of them
#Logger improvements - Placement in code - General changes of the files - Directories(?)
#Removing username and password because it shouldn't require it?
#Generate fake IP Address? The client_ip address won't be any good for generation because it is the attacker's IP address so make a new one?
    #Take in the attacker's IP address and then generate an IP address in that area?

# Constants.
SSH_BANNER = "SSH-2.0-MySSHServer_1.0"

# Constants.
# Get base directory of where user is running honeypy from.
base_dir = base_dir = Path(__file__).parent.parent
# Source creds_audits.log & cmd_audits.log file path.
#server.key not in static? Should move it to static?
server_key = base_dir / 'DionHoneypot' / 'static' / 'server.key'

terminal_Honeypot_log_local_file_path = base_dir / 'DionHoneypot' / 'log_files' / 'terminal_honeypot.log'
creds_logger_log_local_file_path = base_dir / 'DionHoneypot' / 'log_files' / 'creds_logger.log'

host_key = paramiko.RSAKey(filename=server_key)

#Paramiko Invoke shell for powershel terminal
#Socket for IP address. Paramiko for shell?

#Logging Format.
logging_format = logging.Formatter('%(asctime)s %(message)s')

#Captures Commands, Date and Time
honeypot_logger = logging.getLogger('TerminalHoneypotLogger')
honeypot_logger.setLevel(logging.INFO)
honeypot_handler = RotatingFileHandler('terminal_honeypot.log', maxBytes=10000, backupCount=5)
honeypot_handler.setFormatter(logging_format)
honeypot_logger.addHandler(honeypot_handler)

# Credentials Logger. Captures IP Address.
#To be updated to capture the command with the IP Address
creds_logger = logging.getLogger('CredsLogger')
creds_logger.setLevel(logging.INFO)
creds_handler = RotatingFileHandler('creds_logger.log', maxBytes=10000, backupCount=5)
creds_handler.setFormatter(logging_format)
creds_logger.addHandler(creds_handler)

# Configure Google Generative AI API
key = ""

genai.configure(api_key=key)
model = genai.GenerativeModel('gemini-1.5-pro-latest')

# Global scope
current_user = None
file_structure = None

#Paramiko Server
#Changes to be made
class Server(paramiko.ServerInterface):

    def __init__(self, client_ip, input_username=None, input_password=None):
        self.event = threading.Event()
        self.client_ip = client_ip
        self.input_username = input_username
        self.input_password = input_password

    def check_channel_request(self, kind, chanid):
        if kind == 'session':
            return paramiko.OPEN_SUCCEEDED
    
    def get_allowed_auths(self, username):
        return "password"
        
    def check_auth_password(self, username, password):
        honeypot_logger.info(f'Client {self.client_ip} attempted connection.')
        creds_logger.info(f'{self.client_ip}, {username}, {password}')
        if self.input_username is not None and self.input_password is not None:
            if username == self.input_username and password == self.input_password:
                return paramiko.AUTH_SUCCESSFUL
            else:
                return paramiko.AUTH_FAILED
        else:
            return paramiko.AUTH_SUCCESSFUL
    
    def check_channel_shell_request(self, channel):
        self.event.set()
        return True

    def check_channel_pty_request(self, channel, term, width, height, pixelwidth, pixelheight, modes):
        return True

    def check_channel_exec_request(self, channel, command):
        command = str(command)
        return True
    
#Client Handler
#Changes to be made
def client_handle(client, addr, username, password, tarpit=False):
    client_ip = addr[0]
    print(f"{client_ip} connected to server.")
    try:
    
        # Initlizes a Transport object using the socket connection from client.
        transport = paramiko.Transport(client)
        transport.local_version = SSH_BANNER

        # Creates an instance of the SSH server, adds the host key to prove its identity, starts SSH server.
        server = Server(client_ip=client_ip, input_username=username, input_password=password)
        transport.add_server_key(host_key)
        transport.start_server(server=server)

        # Establishes an encrypted tunnel for bidirectional communication between the client and server.
        channel = transport.accept(100)
        if channel is None:
            print("No channel was opened.")
            return

        # Set up user and file system
        generate_fake_user()
        generate_fake_file_structure()
        current_directory = f"C:\\Users\\{current_user}"
        standard_banner = "Welcome to Ubuntu 22.04 LTS (Jammy Jellyfish)!\r\n\r\n"
        
        try:
            # Endless Banner: If tarpit option is passed, then send 'endless' ssh banner.
            if tarpit: #Nessecary?
                endless_banner = standard_banner * 100
                for line in endless_banner.splitlines:
                    channel.send(line)
                    time.sleep(8) #Hardcoded Delay?
            # Standard Banner: Send generic welcome banner to impersonate server.
            else:
                channel.send(standard_banner)
            # Send channel connection to deceptive_terminal for interpretation.
            #deceptive_terminal should then send it to handle_command
            # Wait for shell to be ready
            server.event.wait(10)#Nessecary?

            # Start shell interaction
            handle_command(channel, client_ip, current_directory, file_structure, current_user)


        except Exception as error:
            print(error)
    # Generic catch all exception error code.
    except Exception as error:
        print(error)
        print("!!! Exception !!!")
    
    # Once session has completed, close the transport connection.
    finally:
        try:
            transport.close()
        except Exception:
            pass
        
        client.close()

# Desktop username Generation
#Testing - To be changed later
first_names = [
    "James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas",
    "Christopher", "Daniel", "Matthew", "Anthony", "Mark", "Paul", "Andrew", "George", "Edward", "Samuel",
    "Benjamin", "Jack", "Henry", "Isaac", "Oliver", "Harry", "Ethan", "Oscar", "Liam", "Mary", "Jennifer", 
    "Linda", "Patricia", "Elizabeth", "Susan", "Jessica", "Sarah", "Karen", "Nancy", "Betty", "Helen", "Sandra", 
    "Ashley", "Dorothy", "Amanda", "Ruth", "Sharon", "Michelle", "Kimberly", "Emily", "Melissa", "Laura", 
    "Deborah", "Carolyn", "Rebecca", "Rachel", "Shirley"
]
last_names = [
    "Smith", "Jones", "Taylor", "Brown", "Williams", "Wilson", "Moore", "Davis", "Clark", "Lewis",
    "Roberts", "Walker", "Young", "Harris", "Martin", "Jackson", "Thompson", "White", "King", "Scott",
    "Adams", "Baker", "Nelson", "Carter", "Mitchell", "Perez", "Reed", "Cook", "Murphy", "Bailey", "Cooper",
    "Morris", "Stewart", "Price", "Hughes", "Wood", "Cole", "Ryan", "Ward", "Allen", "Ross", "West", "Turner", 
    "Evans", "Gray", "Shaw", "Richards"
]

# Function to generate a fake username
# Randomly creates a user from arrays and 3 numbers
def generate_fake_user():
    global current_user
    first_name = random.choice(first_names)
    last_name = random.choice(last_names)
    random_digits = ''.join(str(random.randint(0, 9)) for _ in range(3))
    current_user = f"{first_name[0].lower()}{last_name.lower()}{random_digits}"
    print(f"Generated username: {current_user}")

def generate_fake_file_structure():
    global file_structure
    # Debug
    if not current_user:
        print("Error: current_user is not defined. Please generate a username first.")
        return {}

    ai_prompt = f"""
    You are simulating a corporate Windows environment. 
    Generate a realistic file structure for a user named {current_user}. 
    The file structure should include directories such as 'Desktop', 'Documents', 'Downloads', and any common corporate directories like 'Program Files' or 'Users'.
    The file structure must be returned in JSON format only, like:
    {{
        "C:\\": ["Program Files", "Users", "Windows"],
        "C:\\Users":["{current_user}", "Public", "Admin"],
        "C:\\Users\\{current_user}": ["Desktop", "Documents", "Downloads"]
    }}
    DO NOT include any text, explanations, or terminal-like output.
    """
    
    try:
        response = model.generate_content(ai_prompt)
        file_structure = response.text.strip()
        print("Stored File Structure:" + file_structure)
        
    except Exception as e:
        print(f"Error generating file structure: {e}")
        return {}

def generate_fake_directory_listing(path, file_structure):
    if path in file_structure:
        return "\n".join(file_structure[path])
    return "The system cannot find the path specified."


def handle_command(channel, current_directory, file_structure, client_ip, current_user):
    command = b""
    while True:
        try:
            char = channel.recv(1)
            channel.send(char)
            if not char:
                channel.close()

            '''
            channel.send(f"\r\n{current_directory}> ".encode())
            while True:
                char = channel.recv(1024)  # Try reading a larger chunk
                if not char:
                    print("No data received. Client may have disconnected.")
                    return False
                if not char:
                    return False
                if char == b"\r" or char == b"\n":
                    break
                if char == b"\x08":  # backspace
                    command = command[:-1]  # remove last character
                    channel.send(b"\x08 \x08")  # simulate the backspace in the terminal
                else:
                    command += char
                    channel.send(char)  # echo input
            '''

            command = command.decode(errors='ignore').strip()

            honeypot_logger.info(f"Bad Actor Input: {command}, Location: {client_ip}")

            if command.lower() == "exit":
                channel.send(b"\nExiting the terminal honeypot. Goodbye.\n")
                return False

            # Static command responses
            elif command.lower() == "whoami":
                channel.send(f"\r\n{current_user}\r\n".encode())

            elif command.lower() == "pwd":
                channel.send(f"\r\n{current_directory}\r\n".encode())

            elif command.lower() in ["dir", "ls"]:
                listing = generate_fake_directory_listing(current_directory, file_structure)
                channel.send(f"\r\n{listing}\r\n".encode())
            else:
                # Fallback to AI/LLM
                #Inform AI of the circumstances as much as possible or? Enforce the AI into a role?
                ai_prompt = f"""
You are simulating a Windows PowerShell terminal running on a corporate desktop. 
Only respond with the raw output **exactly** as the terminal wouldâ€”no explanations, markdown, or extra comments.

The current user is: {current_user}
The command entered was: {command}
The current directory is: {current_directory}
The file structure is as follows (JSON): 
{file_structure}

If the command is valid for a terminal, return the realistic output (with formatting, spacing, etc.). 
If the command is invalid, respond exactly how PowerShell would (e.g., "The term '{command}' is not recognized as the name of a cmdlet...").
                """
                response = model.generate_content(ai_prompt)
                channel.send(f"\r\n{response.text.strip()}\r\n".encode())

        except Exception as e:
            honeypot_logger.error(f"Error in handle_command: {e}")
            channel.send(b"\r\nAn error occurred.\r\n")
            return False

#Honeypot
def deceptive_terminal(address="0.0.0.0", port=2222, username=None, password=None, tarpit=False):
    # Open a new socket using TCP, bind to port.
    socks = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socks.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    socks.bind((address, port))
    # Can handle 100 concurrent connections.
    socks.listen(100)
    socks.settimeout(1)
    #socket timeout?
    #print(f"SSH server is listening on port {port}.")
    #Order of things?
    #print("Welcome to the Secure Server Terminal. Please enter your commands below.")
    #generate_fake_user()
    #generate_fake_file_structure()
    #Might need to rework this if it's causing errors
    #This might be messing with the AI because it's add on C: when the AI should already be doing that as it's a terminal
    #But then the Terminal needs to have a default to show when it's online to the attack?
    #current_directory = f"C:\\Users\\{current_user}"
    try:
        while True:
            client, addr = socks.accept()
            print(f"Accepted connection from {addr}")
            thread = threading.Thread(target=client_handle, args=(client, addr, username, password, tarpit))
            thread.start()
    except KeyboardInterrupt:
        print("\nKeyboardInterrupt. Shutting down...")
    finally:
        socks.close()

    '''
    while True:
        try:
            #Does this allow for multiple instances of a honeypot and threading?
             # Accept connection from client and address.
            client, addr = socks.accept()
            print(f"Accepted connection from {addr}")
            # Start a new thread to handle the client connection.
            #Managing globals per connection
            SSH_Honeypot_thread = threading.Thread(target=client_handle, args=(client, addr, username, password, tarpit))
            SSH_Honeypot_thread.start()
            #Rewrite fake_prompt and bad_actor_input
            #Logic error of fake_prompt and the handler? Too many 'C:\\?
            #fake_prompt = f"{current_directory}> " #??? #Should the current_directory not be definded in the handle?
            #How to sanitise?
            #bad_actor_input = input(f"{fake_prompt} ")
            #honeypot_logger.info(f"Bad Actor Command: {bad_actor_input}, From {client_ip}")
            #if not handle_command(bad_actor_input, current_directory, file_structure, current_user):
                #break
        except KeyboardInterrupt:
            print("\nExiting the terminal honeypot. Goodbye!")
            break
        except Exception as e:
            honeypot_logger.error(f"Error: {e}")
            print(f"An error occurred: {e}")
        '''
#Needs to be reworked for the SSH Server
if __name__ == "__main__":
    deceptive_terminal()